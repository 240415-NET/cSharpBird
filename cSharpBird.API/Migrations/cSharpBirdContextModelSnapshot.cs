// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cSharpBird.API;

#nullable disable

namespace cSharpBird.API.Migrations
{
    [DbContext(typeof(cSharpBirdContext))]
    partial class cSharpBirdContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CS_AS")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("cSharpBird.API.Bird", b =>
                {
                    b.Property<string>("bandCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("bNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bbc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("checklistID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("numSeen")
                        .HasColumnType("int");

                    b.Property<string>("speciesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("bandCode");

                    b.HasIndex("checklistID");

                    b.ToTable("Birds", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("cSharpBird.API.Checklist", b =>
                {
                    b.Property<Guid>("checklistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("cNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("checklistDateTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("distance")
                        .HasColumnType("real");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<string>("locationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("stationary")
                        .HasColumnType("bit");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("checklistID");

                    b.ToTable("Checklists", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("cSharpBird.API.Salt", b =>
                {
                    b.Property<Guid>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("Salts", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("cSharpBird.API.User", b =>
                {
                    b.Property<Guid>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("displayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hashedPW")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("Users", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("cSharpBird.API.Bird", b =>
                {
                    b.HasOne("cSharpBird.API.Checklist", null)
                        .WithMany("birds")
                        .HasForeignKey("checklistID");
                });

            modelBuilder.Entity("cSharpBird.API.Checklist", b =>
                {
                    b.Navigation("birds");
                });
#pragma warning restore 612, 618
        }
    }
}
